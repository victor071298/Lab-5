#include<stdio.h>
#include<pthread.h>
#include<stdlib.h>
#include<time.h>

int nthreads;  //Número de threads
int *x; //Vetor de inteiros x
pthread_mutex_t mutex; //Variável mutex que será utilizada para fazer o lock
pthread_cond_t cond; //Variável cond que será utilizada para retirar a thread do wait 
int bloqueadas = 0; //Contabiliza o número de threads que passaram pela barreira

void barreira(int nthreads) {
    pthread_mutex_lock(&mutex); //inicio seção critica
    if (bloqueadas == (nthreads-1)) { 
      // Passará quando a ultima thread entrar na barreira
      pthread_cond_broadcast(&cond); //Broadcast utilizado para liberar todas as threads presas pela barreira
      bloqueadas=0;
    } else {
      bloqueadas++;
      pthread_cond_wait(&cond, &mutex);
    }
    pthread_mutex_unlock(&mutex); //fim seção critica
}

void *somatorio (void*arg){
    int id = (int) arg;
    int s=0; //Variavel local para acumular o somatório dos elementos
    int r;
    for(int j=0;j<nthreads;j++){
        for(int i=0; i<nthreads;i++){
            s+=x[i];
        }
        printf("Thread %d ,realizei o %d somatorio\n",id,j+1);
        barreira(nthreads);
        printf("Thread %d ,passei pela primeira barreira\n",id);
        r=rand();
        x[id]=(id*r)%10;
        printf("Thread %d , inseri o valor %d no vetor\n",id,x[id]);
        barreira(nthreads);
        printf("Thread %d ,passei pela segunda barreira\n",id);
    }
    pthread_exit((void*)s);
}

int main(int argc, char *argv[]){
    
    //Inicializando as variáveis e a seed do random
    
    srand(time(NULL)); //Utilizado para gerar os floats aleatórios
    pthread_t *tid;
    int *retorno; //Variável que armazena o retorno das threads

    //Inicializando o Mutex e a condição
    
    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init (&cond, NULL);
    
    //Corrigindo possíveis erros na entrada
    
    if(argc<2){
        printf("A entrada deve ser: ./<nomedoprograma> <numero de thrads> \n");
        return 1;
    }
    nthreads=atoi(argv[1]); //Armazenando o número de threads dado como entrada
    
    //Alocando a memória para o vetor que será preenchido
    x= (int*)malloc(sizeof(int)*nthreads);
    retorno= (int*)malloc(sizeof(int)*nthreads);
    
    //Preenchendo o vetor com números aleatórios de 0 a 9;
    
    for(int i = 0; i<nthreads;i++){
        x[i]=rand() % 10;
    }
    
    //Alocando a memória referente as threads
    tid = (pthread_t*)malloc(sizeof(pthread_t)*nthreads);
    if(tid==NULL){
        fprintf(stderr,"Erro-malloc\n");
        return 2;
    }
    
    //Criando as threads
    
    for(int i = 0; i < nthreads; i++){
        if(pthread_create(tid+i, NULL, somatorio,(void*) i)){
            fprintf(stderr,"Erro--pthread_create\n");
            return 3;
        }
    }

    //Aguardando o término das threads e armazenando o valor calculado por elas
    
    for(int i=0;i<nthreads;i++){
        pthread_join(*(tid+i),(void**)&retorno[i]);
    }


    for(int i=0;i<nthreads-1;i++){
        if(retorno[i]!=retorno[i+1]){
            printf("Valores incorretos\n");
            return 4;
        }
    }

    printf("Todos os valores foram calculados corretamente, somatorio: %d \n",retorno[0]);

    // Desalocando variáveis e esvaziando vetores
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond);
    free(retorno);
    free(x);
    free(tid);
    
    return 0;
}
